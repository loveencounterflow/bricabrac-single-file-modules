(function() {
  'use strict';
  var Bounded_list, tests;

  tests = {
    //---------------------------------------------------------------------------------------------------------
    types_bounded_list: function() {
      var Bounded_list, blist, data_1, data_2, data_3, data_4, equals, internals, Ωhllt_136, Ωhllt_137, Ωhllt_138, Ωhllt_139, Ωhllt_140, Ωhllt_141, Ωhllt_142, Ωhllt_143, Ωhllt_144, Ωhllt_145, Ωhllt_146, Ωhllt_147, Ωhllt_148, Ωhllt_149, Ωhllt_150, Ωhllt_151, Ωhllt_152, Ωhllt_153, Ωhllt_154, Ωhllt_155, Ωhllt_156, Ωhllt_157, Ωhllt_158, Ωhllt_159, Ωhllt_160, Ωhllt_161, Ωhllt_162, Ωhllt_163, Ωhllt_164, Ωhllt_165, Ωhllt_166, Ωhllt_167, Ωhllt_168, Ωhllt_169, Ωhllt_170, Ωhllt_171, Ωhllt_172, Ωhllt_173, Ωhllt_174, Ωhllt_175, Ωhllt_176, Ωhllt_177, Ωhllt_178, Ωhllt_179, Ωhllt_180;
      ({internals} = require('../../../apps/hollerith/lib/types'));
      ({Bounded_list} = internals);
      ({
        // { type_of,                } = SFMODULES.unstable.require_type_of()
        isDeepStrictEqual: equals
      } = require('node:util'));
      //.......................................................................................................
      blist = new Bounded_list(3);
      this.eq((Ωhllt_136 = function() {
        return blist.size;
      }), 0);
      this.eq((Ωhllt_137 = function() {
        return blist.is_empty;
      }), true);
      this.eq((Ωhllt_138 = function() {
        return blist.max_size;
      }), 3);
      this.eq((Ωhllt_139 = function() {
        return blist.at(-1);
      }), void 0);
      //.......................................................................................................
      data_1 = blist.current;
      this.eq((Ωhllt_140 = function() {
        return data_1;
      }), {});
      this.eq((Ωhllt_141 = function() {
        return blist.current;
      }), data_1);
      this.eq((Ωhllt_142 = function() {
        return blist.at(-1);
      }), data_1);
      this.eq((Ωhllt_143 = function() {
        return blist.size;
      }), 1);
      this.eq((Ωhllt_144 = function() {
        return blist.is_empty;
      }), false);
      //.......................................................................................................
      data_2 = blist.create();
      this.eq((Ωhllt_145 = function() {
        return equals(data_1, data_2);
      }), true);
      this.eq((Ωhllt_146 = function() {
        return data_1 === data_2;
      }), false);
      this.eq((Ωhllt_147 = function() {
        return blist.at(-1);
      }), data_2);
      this.eq((Ωhllt_148 = function() {
        return blist.size;
      }), 2);
      this.eq((Ωhllt_149 = function() {
        return blist.is_empty;
      }), false);
      this.eq((Ωhllt_150 = function() {
        return data_2 === blist.current;
      }), true);
      this.eq((Ωhllt_151 = function() {
        return blist.at(-1);
      }), data_2);
      this.eq((Ωhllt_152 = function() {
        return blist.size;
      }), 2);
      this.eq((Ωhllt_153 = function() {
        return blist.is_empty;
      }), false);
      //.......................................................................................................
      data_3 = blist.create();
      this.eq((Ωhllt_154 = function() {
        return equals(data_2, data_3);
      }), true);
      this.eq((Ωhllt_155 = function() {
        return data_2 === data_3;
      }), false);
      this.eq((Ωhllt_156 = function() {
        return blist.at(-1);
      }), data_3);
      this.eq((Ωhllt_157 = function() {
        return blist.size;
      }), 3);
      this.eq((Ωhllt_158 = function() {
        return blist.is_empty;
      }), false);
      this.eq((Ωhllt_159 = function() {
        return data_3 === blist.current;
      }), true);
      this.eq((Ωhllt_160 = function() {
        return blist.at(-1);
      }), data_3);
      this.eq((Ωhllt_161 = function() {
        return blist.at(-2);
      }), data_2);
      this.eq((Ωhllt_162 = function() {
        return blist.at(-3);
      }), data_1);
      this.eq((Ωhllt_163 = function() {
        return blist.size;
      }), 3);
      this.eq((Ωhllt_164 = function() {
        return blist.is_empty;
      }), false);
      //.......................................................................................................
      data_4 = blist.create({
        a: 1,
        b: 2
      });
      this.eq((Ωhllt_165 = function() {
        return equals(data_3, data_4);
      }), false);
      this.eq((Ωhllt_166 = function() {
        return data_3 === data_4;
      }), false);
      this.eq((Ωhllt_167 = function() {
        return blist.at(-1);
      }), {
        a: 1,
        b: 2
      });
      this.eq((Ωhllt_168 = function() {
        return blist.size;
      }), 3);
      this.eq((Ωhllt_169 = function() {
        return blist.is_empty;
      }), false);
      this.eq((Ωhllt_170 = function() {
        return blist.current;
      }), {
        a: 1,
        b: 2
      });
      this.eq((Ωhllt_171 = function() {
        return blist.at(-1);
      }), {
        a: 1,
        b: 2
      });
      this.eq((Ωhllt_172 = function() {
        return blist.at(-2);
      }), data_3);
      this.eq((Ωhllt_173 = function() {
        return blist.at(-3);
      }), data_2);
      this.eq((Ωhllt_174 = function() {
        return blist.size;
      }), 3);
      this.eq((Ωhllt_175 = function() {
        return blist.is_empty;
      }), false);
      //.......................................................................................................
      this.eq((Ωhllt_176 = function() {
        return [blist.create(), blist.size];
      }), [{}, 3]);
      this.eq((Ωhllt_177 = function() {
        return [blist.create(), blist.size];
      }), [{}, 3]);
      this.eq((Ωhllt_178 = function() {
        return [blist.create(), blist.size];
      }), [{}, 3]);
      //.......................................................................................................
      blist = new Bounded_list(3);
      this.eq((Ωhllt_179 = function() {
        return [
          blist.assign({
            message: 'oops'
          }),
          blist.size,
          blist.current
        ];
      }), [
        {
          message: 'oops'
        },
        1,
        {
          message: 'oops'
        }
      ]);
      this.eq((Ωhllt_180 = function() {
        return [
          blist.assign({
            message: 'over',
            x: 1
          }),
          blist.size,
          blist.current
        ];
      }), [
        {
          message: 'over',
          x: 1
        },
        1,
        {
          message: 'over',
          x: 1
        }
      ]);
      //.......................................................................................................
      return null;
    }
  };

  Bounded_list = (function() {
    //===========================================================================================================
    /* NOTE Future Single-File Module */
    class Bounded_list {
      //---------------------------------------------------------------------------------------------------------
      constructor(max_size = 3) {
        this.max_size = max_size;
        this.data = [];
        return void 0;
      }

      //---------------------------------------------------------------------------------------------------------
      create(...P) {
        this.data.push(clean_assign({}, ...P));
        if (this.size > this.max_size) {
          this.data.shift();
        }
        return this.current;
      }

      //---------------------------------------------------------------------------------------------------------
      assign(...P) {
        return clean_assign(this.current, ...P);
      }

      at(idx) {
        return this.data.at(idx);
      }

    };

    //---------------------------------------------------------------------------------------------------------
    set_getter(Bounded_list.prototype, 'size', function() {
      return this.data.length;
    });

    set_getter(Bounded_list.prototype, 'is_empty', function() {
      return this.data.length === 0;
    });

    set_getter(Bounded_list.prototype, 'current', function() {
      if (this.is_empty) {
        return this.create();
      } else {
        return this.at(-1);
      }
    });

    return Bounded_list;

  }).call(this);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
