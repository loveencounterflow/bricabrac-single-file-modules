(function() {
  'use strict';
  var BRICS;

  //###########################################################################################################

  //===========================================================================================================
  BRICS = {
    //=========================================================================================================
    /* NOTE Future Single-File Module */
    require_nanotypes: function() {
      var CFG, SFMODULES, Type, Typespace, clean_assign, exports, freeze, hide, nameit, remap, rpr, set_getter;
      //=======================================================================================================
      SFMODULES = require('./main');
      ({clean_assign} = SFMODULES.unstable.require_clean_assign());
      ({hide, set_getter} = SFMODULES.require_managed_property_tools());
      ({nameit} = SFMODULES.require_nameit());
      ({remap} = SFMODULES.unstable.require_remap());
      ({freeze} = Object);
      ({
        show_no_colors: rpr
      } = SFMODULES.unstable.require_show());
      // { type_of,              } = SFMODULES.unstable.require_type_of()
      CFG = Symbol.for('cfg');
      //=======================================================================================================
      Type = class Type {
        //-----------------------------------------------------------------------------------------------------
        constructor(typespace, name, isa) {
          hide(this, 'name', name);
          hide(this, 'T', typespace);
          hide(this, '_isa', isa);
          set_getter(this, CFG, () => {
            return this.T[CFG];
          });
          this.data = {}; // new Bounded_list()
          return void 0;
        }

        //-----------------------------------------------------------------------------------------------------
        isa(x, data = null, mapping = null) {
          var R;
          this.data = {};
          R = this._isa.call(this, x);
          //...................................................................................................
          if (data != null) {
            if (mapping != null) {
              clean_assign(data, remap(clean_assign({}, this.data), mapping));
            } else {
              /* d1 m1 */              clean_assign(data, this.data);
            }
          } else /* d1 m0 */if (mapping != null) {
            remap(this.data, mapping);
          }
/* d0 m1 */          return R/* d0 m0 */;
        }

        //-----------------------------------------------------------------------------------------------------
        validate(x, data = null, mapping = null) {
          if (this.isa(x, data, mapping)) {
            return x;
          }
          /* TAINT use better rpr() */
          throw new Error(`Î©bsk_100 not a valid ${this.name}: ${x}`);
        }

        //-----------------------------------------------------------------------------------------------------
        assign(...P) {
          return clean_assign(this.data, ...P);
        }

        //-----------------------------------------------------------------------------------------------------
        fail(message, ...P) {
          clean_assign(this.data, {message}, ...P);
          return false;
        }

      };
      Typespace = (function() {
        //=======================================================================================================
        class Typespace {
          //=====================================================================================================
          constructor(cfg = null) {
            var Typeclass, clasz, i, isa, len, name, ref, ref1;
            clasz = this.constructor;
            this[CFG] = freeze(clean_assign({}, (ref = clasz[CFG]) != null ? ref : void 0, cfg != null ? cfg : void 0));
            ref1 = Object.getOwnPropertyNames(clasz);
            for (i = 0, len = ref1.length; i < len; i++) {
              name = ref1[i];
              Typeclass = class Typeclass extends Type {};
              nameit(name, Typeclass);
              this[name] = new Typeclass(this, name, isa = clasz[name]);
            }
            return void 0;
          }

        };

        //-----------------------------------------------------------------------------------------------------
        Typespace[CFG] = null;

        return Typespace;

      }).call(this);
      //=======================================================================================================
      return exports = {Type, Typespace, CFG};
    }
  };

  //===========================================================================================================
  Object.assign(module.exports, BRICS);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
