(function() {
  'use strict';
  var BRICS, debug;

  //===========================================================================================================
  ({debug} = console);

  //###########################################################################################################

  //===========================================================================================================
  BRICS = {
    //=========================================================================================================
    /* NOTE Future Single-File Module */
    require_nanotypes_v1: function() {
      var CFG, SFMODULES, Type, Typespace, clean_assign, exports, freeze, hide, nameit, remap, rpr, set_getter;
      //=======================================================================================================
      SFMODULES = require('./main');
      ({clean_assign} = SFMODULES.unstable.require_clean_assign());
      ({hide, set_getter} = SFMODULES.require_managed_property_tools());
      ({nameit} = SFMODULES.require_nameit());
      ({remap} = SFMODULES.unstable.require_remap());
      ({freeze} = Object);
      ({
        show_no_colors: rpr
      } = SFMODULES.unstable.require_show());
      // { type_of,              } = SFMODULES.unstable.require_type_of()
      CFG = Symbol.for('cfg');
      //=======================================================================================================
      Type = class Type {
        //-----------------------------------------------------------------------------------------------------
        constructor(typespace, name, isa) {
          hide(this, 'name', name);
          hide(this, 'T', typespace);
          hide(this, '_isa', isa);
          set_getter(this, CFG, () => {
            return this.T[CFG];
          });
          this.data = {}; // new Bounded_list()
          return void 0;
        }

        //-----------------------------------------------------------------------------------------------------
        isa(x, data = null, mapping = null) {
          var R;
          this.data = {};
          R = this._isa.call(this, x);
          //...................................................................................................
          if (data != null) {
            if (mapping != null) {
              clean_assign(data, remap(clean_assign({}, this.data), mapping));
            } else {
              /* d1 m1 */              clean_assign(data, this.data);
            }
          } else /* d1 m0 */if (mapping != null) {
            remap(this.data, mapping);
          }
/* d0 m1 */          return R/* d0 m0 */;
        }

        //-----------------------------------------------------------------------------------------------------
        validate(x, data = null, mapping = null) {
          if (this.isa(x, data, mapping)) {
            return x;
          }
          /* TAINT use better rpr() */
          throw new Error(`Ωbbnt___1 not a valid ${this.name}: ${x}`);
        }

        //-----------------------------------------------------------------------------------------------------
        assign(...P) {
          return clean_assign(this.data, ...P);
        }

        //-----------------------------------------------------------------------------------------------------
        fail(message, ...P) {
          clean_assign(this.data, {message}, ...P);
          return false;
        }

      };
      Typespace = (function() {
        //=======================================================================================================
        class Typespace {
          //=====================================================================================================
          constructor(cfg = null) {
            var Typeclass, clasz, i, isa, len, name, ref, ref1;
            clasz = this.constructor;
            this[CFG] = freeze(clean_assign({}, (ref = clasz[CFG]) != null ? ref : void 0, cfg != null ? cfg : void 0));
            ref1 = Object.getOwnPropertyNames(clasz);
            for (i = 0, len = ref1.length; i < len; i++) {
              name = ref1[i];
              Typeclass = class Typeclass extends Type {};
              nameit(name, Typeclass);
              this[name] = new Typeclass(this, name, isa = clasz[name]);
            }
            return void 0;
          }

        };

        //-----------------------------------------------------------------------------------------------------
        Typespace[CFG] = null;

        return Typespace;

      }).call(this);
      //=======================================================================================================
      return exports = {Type, Typespace, CFG};
    },
    //=========================================================================================================
    /* NOTE Future Single-File Module */
    require_nanotypes_v2: function() {
      var CFG, SFMODULES, Type, Typespace, clean_assign, exports, freeze, hide, nameit, remap, rpr, set_getter;
      //=======================================================================================================
      SFMODULES = require('./main');
      ({clean_assign} = SFMODULES.unstable.require_clean_assign());
      ({hide, set_getter} = SFMODULES.require_managed_property_tools());
      ({nameit} = SFMODULES.require_nameit());
      ({remap} = SFMODULES.unstable.require_remap());
      ({freeze} = Object);
      ({
        show_no_colors: rpr
      } = SFMODULES.unstable.require_show());
      // { type_of,              } = SFMODULES.unstable.require_type_of()
      CFG = Symbol.for('cfg');
      Type = (function() {
        //=======================================================================================================
        class Type {
          //-----------------------------------------------------------------------------------------------------
          constructor(typespace, name, isa) {
            hide(this, 'name', name);
            hide(this, 'T', typespace);
            hide(this, '_isa', isa);
            hide(this, 'inputs', {});
            set_getter(this, CFG, () => {
              return this.T[CFG];
            });
            this.data = {};
            return void 0;
          }

          //-----------------------------------------------------------------------------------------------------
          dm_isa(data, mapping, x, ...P) {
            /* Like `Type::isa()`, but capture data and optionally remap it */
            var R;
            R = this.isa(x, ...P);
            //...................................................................................................
            if (data != null) {
              if (mapping != null) {
                clean_assign(data, remap(clean_assign({}, this.data), mapping));
              } else {
                /* d1 m1 */                clean_assign(data, this.data);
              }
            } else /* d1 m0 */if (mapping != null) {
              remap(this.data, mapping);
            }
/* d0 m1 */            return R/* d0 m0 */;
          }

          //-----------------------------------------------------------------------------------------------------
          isa(x, ...P) {
            var R;
            this.data = {};
            this.inputs = {x, ...P};
            R = this._isa.call(this, x, ...P);
            return R;
          }

          //-----------------------------------------------------------------------------------------------------
          validate(x, ...P) {
            var message;
            if (this.isa(x, ...P)) {
              return x;
            }
            message = `not a valid ${this.full_name}: ${x}`;
            if (this.data.message != null) {
              message += ` – ${this.data.message}`;
            }
            throw new Error(message);
          }

          //-----------------------------------------------------------------------------------------------------
          assign(...P) {
            return clean_assign(this.data, ...P);
          }

          //-----------------------------------------------------------------------------------------------------
          fail(message, ...P) {
            clean_assign(this.data, {message}, ...P);
            return false;
          }

        };

        //-----------------------------------------------------------------------------------------------------
        set_getter(Type.prototype, 'full_name', function() {
          if (!(this.inputs[0] instanceof Type)) {
            return this.name;
          }
          return `${this.name} <${this.inputs[0].full_name}>`;
        });

        return Type;

      }).call(this);
      Typespace = (function() {
        //=======================================================================================================
        class Typespace {
          //=====================================================================================================
          constructor(cfg = null) {
            var Typeclass, clasz, i, isa, len, name, ref, ref1;
            clasz = this.constructor;
            this[CFG] = freeze(clean_assign({}, (ref = clasz[CFG]) != null ? ref : void 0, cfg != null ? cfg : void 0));
            ref1 = Object.getOwnPropertyNames(clasz);
            for (i = 0, len = ref1.length; i < len; i++) {
              name = ref1[i];
              Typeclass = class Typeclass extends Type {};
              nameit(name, Typeclass);
              this[name] = new Typeclass(this, name, isa = clasz[name]);
            }
            return void 0;
          }

        };

        //-----------------------------------------------------------------------------------------------------
        Typespace[CFG] = null;

        return Typespace;

      }).call(this);
      //=======================================================================================================
      return exports = {Type, Typespace, CFG};
    }
  };

  //===========================================================================================================
  BRICS.require_nanotypes = BRICS.require_nanotypes_v2;

  Object.assign(module.exports, BRICS);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
