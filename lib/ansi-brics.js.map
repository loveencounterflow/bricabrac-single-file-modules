{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ansi-brics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\n\n############################################################################################################\n#\n#===========================================================================================================\nANSI_BRICS =\n  \n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_ansi: ->\n\n    #=========================================================================================================\n    ANSI = new class Ansi\n      ###\n\n      * as for the background ('bg'), only colors and no effects can be set; in addition, the bg color can be\n        set to its default (or 'transparent'), which will show the terminal's or the terminal emulator's\n        configured bg color\n      * as for the foreground ('fg'), colors and effects such as blinking, bold, italic, underline, overline,\n        strike can be set; in addition, the configured terminal default font color can be set, and each effect\n        has a dedicated off-switch\n      * neat tables can be drawn by combining the overline effect with `│` U+2502 'Box Drawing Light Vertical\n        Line'; the renmarkable feature of this is that it minimizes spacing around characters meaning it's\n        possible to have adjacent rows of cells separated from the next row by a border without having to\n        sacrifice a line of text just to draw the border.\n      * while the two color palattes implied by the standard XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n        * better to only use full RGB than to fuzz around with palettes\n        * apps that use colors at all should be prepared for dark and bright backgrounds\n        * in general better to set fg, bg colors than to use reverse\n        * but reverse actually does do what it says—it swaps fg with bg color\n\n      \\x1b[39m default fg color\n      \\x1b[49m default bg color\n\n      ###\n      #-------------------------------------------------------------------------------------------------------\n      fg_from_dec: ([ r, g, b, ]) -> \"\\x1b[38:2::#{r}:#{g}:#{b}m\"\n      bg_from_dec: ([ r, g, b, ]) -> \"\\x1b[48:2::#{r}:#{g}:#{b}m\"\n      fg_from_hex: ( rhx ) -> @fg_from_dec @dec_from_hex rhx\n      bg_from_hex: ( rhx ) -> @bg_from_dec @dec_from_hex rhx\n      fg_from_name: ( name ) ->\n        rgb = @colors[ name ] ? @colors.fallback\n        return @fg_from_dec rgb\n      dec_from_hex: ( hex ) ->\n        ### TAINT use proper typing ###\n        throw new Error \"Ω___3 expected text, got #{rpr hex}\" unless ( typeof hex ) is 'string'\n        throw new Error \"Ω___4 not a proper hexadecimal RGB code: '#{hex.replace /'/g, \"\\\\'\"}'\" unless /^#[0-9a-f]{6}$/i.test hex\n        [ r16, g16, b16, ] = [ hex[ 1 .. 2 ], hex[ 3 .. 4 ], hex[ 5 .. 6 ], ]\n        return [ ( parseInt r16, 16 ), ( parseInt g16, 16 ), ( parseInt b16, 16 ), ]\n\n    #---------------------------------------------------------------------------------------------------------\n    return exports = { ANSI, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_ansi_colors_and_effects: ->\n    { ANSI, } = ANSI_BRICS.require_ansi()\n    #.........................................................................................................\n    rgb_dec =\n      black:              [   0,   0,   0, ]\n      darkslategray:      [  47,  79,  79, ]\n      dimgray:            [ 105, 105, 105, ]\n      slategray:          [ 112, 128, 144, ]\n      gray:               [ 128, 128, 128, ]\n      lightslategray:     [ 119, 136, 153, ]\n      darkgray:           [ 169, 169, 169, ]\n      silver:             [ 192, 192, 192, ]\n      lightgray:          [ 211, 211, 211, ]\n      gainsboro:          [ 220, 220, 220, ]\n    #.........................................................................................................\n    rgb_hex =\n      white:            '#ffffff'\n      amethyst:         '#f0a3ff'\n      blue:             '#0075dc'\n      caramel:          '#993f00'\n      damson:           '#4c005c'\n      ebony:            '#191919'\n      forest:           '#005c31'\n      green:            '#2bce48'\n      lime:             '#9dcc00'\n      quagmire:         '#426600'\n      honeydew:         '#ffcc99'\n      iron:             '#808080'\n      jade:             '#94ffb5'\n      khaki:            '#8f7c00'\n      mallow:           '#c20088'\n      navy:             '#003380'\n      orpiment:         '#ffa405'\n      pink:             '#ffa8bb'\n      red:              '#ff0010'\n      sky:              '#5ef1f2'\n      turquoise:        '#00998f'\n      violet:           '#740aff'\n      wine:             '#990000'\n      uranium:          '#e0ff66'\n      xanthin:          '#ffff80'\n      yellow:           '#ffe100'\n      zinnia:           '#ff5005'\n    #.........................................................................................................\n    R =\n      overline1:          '\\x1b[53m'\n      overline0:          '\\x1b[55m'\n      default:            '\\x1b[39m'\n      bg_default:         '\\x1b[49m'\n      bold:               '\\x1b[1m'\n      bold0:              '\\x1b[22m'\n      italic:             '\\x1b[3m'\n      italic0:            '\\x1b[23m'\n      reset:              '\\x1b[0m'\n      #.......................................................................................................\n      black:              ANSI.fg_from_dec rgb_dec.black\n      darkslategray:      ANSI.fg_from_dec rgb_dec.darkslategray\n      dimgray:            ANSI.fg_from_dec rgb_dec.dimgray\n      slategray:          ANSI.fg_from_dec rgb_dec.slategray\n      gray:               ANSI.fg_from_dec rgb_dec.gray\n      lightslategray:     ANSI.fg_from_dec rgb_dec.lightslategray\n      darkgray:           ANSI.fg_from_dec rgb_dec.darkgray\n      silver:             ANSI.fg_from_dec rgb_dec.silver\n      lightgray:          ANSI.fg_from_dec rgb_dec.lightgray\n      gainsboro:          ANSI.fg_from_dec rgb_dec.gainsboro\n      #.......................................................................................................\n      white:              ANSI.fg_from_hex rgb_hex.white\n      amethyst:           ANSI.fg_from_hex rgb_hex.amethyst\n      blue:               ANSI.fg_from_hex rgb_hex.blue\n      caramel:            ANSI.fg_from_hex rgb_hex.caramel\n      damson:             ANSI.fg_from_hex rgb_hex.damson\n      ebony:              ANSI.fg_from_hex rgb_hex.ebony\n      forest:             ANSI.fg_from_hex rgb_hex.forest\n      green:              ANSI.fg_from_hex rgb_hex.green\n      lime:               ANSI.fg_from_hex rgb_hex.lime\n      quagmire:           ANSI.fg_from_hex rgb_hex.quagmire\n      honeydew:           ANSI.fg_from_hex rgb_hex.honeydew\n      iron:               ANSI.fg_from_hex rgb_hex.iron\n      jade:               ANSI.fg_from_hex rgb_hex.jade\n      khaki:              ANSI.fg_from_hex rgb_hex.khaki\n      mallow:             ANSI.fg_from_hex rgb_hex.mallow\n      navy:               ANSI.fg_from_hex rgb_hex.navy\n      orpiment:           ANSI.fg_from_hex rgb_hex.orpiment\n      pink:               ANSI.fg_from_hex rgb_hex.pink\n      red:                ANSI.fg_from_hex rgb_hex.red\n      sky:                ANSI.fg_from_hex rgb_hex.sky\n      turquoise:          ANSI.fg_from_hex rgb_hex.turquoise\n      violet:             ANSI.fg_from_hex rgb_hex.violet\n      wine:               ANSI.fg_from_hex rgb_hex.wine\n      uranium:            ANSI.fg_from_hex rgb_hex.uranium\n      xanthin:            ANSI.fg_from_hex rgb_hex.xanthin\n      yellow:             ANSI.fg_from_hex rgb_hex.yellow\n      zinnia:             ANSI.fg_from_hex rgb_hex.zinnia\n      #.......................................................................................................\n      bg_black:           ANSI.bg_from_dec rgb_dec.black\n      bg_darkslategray:   ANSI.bg_from_dec rgb_dec.darkslategray\n      bg_dimgray:         ANSI.bg_from_dec rgb_dec.dimgray\n      bg_slategray:       ANSI.bg_from_dec rgb_dec.slategray\n      bg_gray:            ANSI.bg_from_dec rgb_dec.gray\n      bg_lightslategray:  ANSI.bg_from_dec rgb_dec.lightslategray\n      bg_darkgray:        ANSI.bg_from_dec rgb_dec.darkgray\n      bg_silver:          ANSI.bg_from_dec rgb_dec.silver\n      bg_lightgray:       ANSI.bg_from_dec rgb_dec.lightgray\n      bg_gainsboro:       ANSI.bg_from_dec rgb_dec.gainsboro\n      #.......................................................................................................\n      bg_white:           ANSI.bg_from_hex rgb_hex.white\n      bg_amethyst:        ANSI.bg_from_hex rgb_hex.amethyst\n      bg_blue:            ANSI.bg_from_hex rgb_hex.blue\n      bg_caramel:         ANSI.bg_from_hex rgb_hex.caramel\n      bg_damson:          ANSI.bg_from_hex rgb_hex.damson\n      bg_ebony:           ANSI.bg_from_hex rgb_hex.ebony\n      bg_forest:          ANSI.bg_from_hex rgb_hex.forest\n      bg_green:           ANSI.bg_from_hex rgb_hex.green\n      bg_lime:            ANSI.bg_from_hex rgb_hex.lime\n      bg_quagmire:        ANSI.bg_from_hex rgb_hex.quagmire\n      bg_honeydew:        ANSI.bg_from_hex rgb_hex.honeydew\n      bg_iron:            ANSI.bg_from_hex rgb_hex.iron\n      bg_jade:            ANSI.bg_from_hex rgb_hex.jade\n      bg_khaki:           ANSI.bg_from_hex rgb_hex.khaki\n      bg_mallow:          ANSI.bg_from_hex rgb_hex.mallow\n      bg_navy:            ANSI.bg_from_hex rgb_hex.navy\n      bg_orpiment:        ANSI.bg_from_hex rgb_hex.orpiment\n      bg_pink:            ANSI.bg_from_hex rgb_hex.pink\n      bg_red:             ANSI.bg_from_hex rgb_hex.red\n      bg_sky:             ANSI.bg_from_hex rgb_hex.sky\n      bg_turquoise:       ANSI.bg_from_hex rgb_hex.turquoise\n      bg_violet:          ANSI.bg_from_hex rgb_hex.violet\n      bg_wine:            ANSI.bg_from_hex rgb_hex.wine\n      bg_uranium:         ANSI.bg_from_hex rgb_hex.uranium\n      bg_xanthin:         ANSI.bg_from_hex rgb_hex.xanthin\n      bg_yellow:          ANSI.bg_from_hex rgb_hex.yellow\n      bg_zinnia:          ANSI.bg_from_hex rgb_hex.zinnia\n    #.........................................................................................................\n    return { ansi_colors_and_effects: R, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_ansi_chunker: ->\n\n    #=========================================================================================================\n    get_string_width  = ( text ) ->\n    VARIOUS_BRICS           = require './various-brics'\n    { set_getter,\n      hide,               } = VARIOUS_BRICS.require_managed_property_tools()\n    #.........................................................................................................\n    get_string_width  = ( text ) ->\n      return ( Array.from text ).length\n    #.........................................................................................................\n    ansi_matcher      = /((?:\\x1b\\[[^m]+m)+)/g\n    segmenter         = new Intl.Segmenter()\n    split_glyphs      = ( text ) -> ( d.segment for d from segmenter.segment text )\n    cfg_template      = Object.freeze { get_string_width, }\n    #.........................................................................................................\n    internals         = Object.freeze { ansi_matcher, segmenter, split_glyphs, cfg_template, }\n\n    #=========================================================================================================\n    class Chunk\n\n      #-------------------------------------------------------------------------------------------------------\n      [Symbol.iterator]: -> yield from @text\n\n      #-------------------------------------------------------------------------------------------------------\n      constructor: ({ has_ansi, width, text, }) ->\n        @width = width\n        hide @, 'has_ansi', has_ansi\n        hide @, 'text',     text\n        return undefined\n\n      #-------------------------------------------------------------------------------------------------------\n      set_getter @::, 'length', -> @text.length\n\n    #=========================================================================================================\n    class Ansi_chunker\n\n      #-------------------------------------------------------------------------------------------------------\n      [Symbol.iterator]: -> yield from @chunks\n\n      #-------------------------------------------------------------------------------------------------------\n      constructor: ( cfg = null ) ->\n        hide @, 'cfg', { cfg_template..., cfg..., }\n        hide @, 'chunks',   []\n        @reset()\n        return undefined\n\n      #-------------------------------------------------------------------------------------------------------\n      set_getter @::, 'has_ansi', ->\n        for chunk in @chunks\n          return true if chunk.has_ansi\n        return false\n\n      #-------------------------------------------------------------------------------------------------------\n      set_getter @::, 'width',  -> @chunks.reduce ( ( sum, chunk ) -> sum + chunk.width   ), 0\n      set_getter @::, 'length', -> @chunks.reduce ( ( sum, chunk ) -> sum + chunk.length  ), 0\n      set_getter @::, 'text',   -> @chunks.reduce ( ( sum, chunk ) -> sum + chunk.text    ), ''\n\n      #-------------------------------------------------------------------------------------------------------\n      reset: ->\n        @chunks   = []\n        return null\n\n      #-------------------------------------------------------------------------------------------------------\n      chunkify: ( source ) ->\n        @reset()\n        if source is ''\n          ### TAINT might as well return an empty list of @chunks ###\n          @chunks.push new Chunk { has_ansi: false, width: 0, text: '', }\n          return @\n        #.....................................................................................................\n        has_ansi = true\n        for text in source.split ansi_matcher\n          has_ansi  = not has_ansi\n          continue if text is ''\n          width     = if has_ansi then 0 else @cfg.get_string_width text\n          @chunks.push new Chunk { has_ansi, width, text, }\n        #.....................................................................................................\n        return @\n\n    #=========================================================================================================\n    chunkify = ( text ) -> new Ansi_chunker text\n\n\n    #=========================================================================================================\n    return exports = { Ansi_chunker, chunkify, internals, }\n\n\n#===========================================================================================================\nObject.assign module.exports, ANSI_BRICS\n\n"
  ]
}