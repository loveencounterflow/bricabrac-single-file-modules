{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\n#\n#===========================================================================================================\nmodule.exports = SFMODULES =\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_list_tools: ->\n    append    = ( list, P... ) -> list.splice list.length, 0, P...\n    is_empty  = ( list ) -> list.length is 0\n    return { append, is_empty, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_escape_html_text: ->\n    escape_html_text = ( text ) ->\n      R = text\n      R = R.replace /&/g, '&amp;'\n      R = R.replace /</g, '&lt;'\n      R = R.replace />/g, '&gt;'\n      return R\n    return { escape_html_text, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_tagfun_tools: ->\n\n    # ### Given the arguments of either a tagged template function call ('tagfun call') or the single\n    # argument of a conventional function call, `get_first_argument()` will return either\n\n    # * the result of applying `as_text()` to the sole argument, or\n\n    # * the result of concatenating the constant parts and the interpolated expressions, which each\n    # expression replaced by the result of applying `as_text()` to it.\n\n    # Another way to describe this behavior is to say that this function treats a conventional call with\n    # a single expression the same way that it treats a funtag call with a string that contains nothing but\n    # that same expression, so the invariant `( get_first_argument exp ) == ( get_first_argument\"#{ exp }\"\n    # )` holds.\n\n    # * intended for string producers, text processing, markup production;\n    # * list some examples. ###\n\n    # #---------------------------------------------------------------------------------------------------------\n    # create_get_first_argument_fn = ( as_text = null ) ->\n    #   as_text ?= ( expression ) -> \"#{expression}\"\n    #   ### TAINT use proper validation ###\n    #   unless ( typeof as_text ) is 'function'\n    #     throw new Error \"Ωidsp___1 expected a function, got #{rpr as_text}\"\n    #   #-------------------------------------------------------------------------------------------------------\n    #   get_first_argument = ( P... ) ->\n    #     unless is_tagfun_call P...\n    #       unless P.length is 1\n    #         throw new Error \"Ωidsp___2 expected 1 argument, got #{P.length}\"\n    #       return as_text P[ 0 ]\n    #     #.....................................................................................................\n    #     [ parts, expressions..., ] = P\n    #     R = parts[ 0 ]\n    #     for expression, idx in expressions\n    #       R += ( as_text expression ) + parts[ idx + 1 ]\n    #     return R\n    #   #-------------------------------------------------------------------------------------------------------\n    #   get_first_argument.create = create_get_first_argument_fn\n    #   return get_first_argument\n\n    #---------------------------------------------------------------------------------------------------------\n    is_tagfun_call = ( P... ) ->\n      return false unless Array.isArray   P[ 0 ]\n      return false unless Object.isFrozen P[ 0 ]\n      return false unless P[ 0 ].raw?\n      return true\n\n    #---------------------------------------------------------------------------------------------------------\n    walk_raw_parts = ( chunks, values... ) ->\n      chunks      = ( chunk for chunk in chunks.raw )\n      chunks.raw  = chunks[ ... ]\n      Object.freeze chunks\n      yield from walk_parts chunks, values...\n\n    #---------------------------------------------------------------------------------------------------------\n    walk_parts = ( chunks, values... ) ->\n      unless is_tagfun_call chunks, values...\n        if values.length isnt 0\n          throw new Error \"Ω___3 expected 1 argument in non-template call, got #{arguments.length}\"\n        if typeof chunks is 'string' then [ chunks, values, ] = [ [ chunks, ], [],          ]\n        else                              [ chunks, values, ] = [ [ '', '', ], [ chunks, ], ]\n      #.......................................................................................................\n      yield { chunk: chunks[ 0 ], isa: 'chunk', }\n      for value, idx in values\n        yield { value, isa: 'value', }\n        yield { chunk: chunks[ idx + 1 ], isa: 'chunk', }\n      #.......................................................................................................\n      return null\n\n    #---------------------------------------------------------------------------------------------------------\n    walk_raw_nonempty_parts = ( chunks, values... ) ->\n      for part from walk_raw_parts chunks, values...\n        yield part unless ( part.chunk is '' ) or ( part.value is '' )\n      return null\n\n    #---------------------------------------------------------------------------------------------------------\n    walk_nonempty_parts = ( chunks, values... ) ->\n      for part from walk_parts chunks, values...\n        yield part unless ( part.chunk is '' ) or ( part.value is '' )\n      return null\n\n    #---------------------------------------------------------------------------------------------------------\n    # return do exports = ( get_first_argument = create_get_first_argument_fn() ) -> {\n    #   get_first_argument, is_tagfun_call,\n    #   walk_parts, walk_nonempty_parts, walk_raw_parts, walk_raw_nonempty_parts, }\n    return {\n      is_tagfun_call,\n      walk_parts,           walk_raw_parts,\n      walk_nonempty_parts,  walk_raw_nonempty_parts, }\n\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_managed_property_tools: ->\n    set_getter = ( object, name, get ) -> Object.defineProperties object, { [name]: { get, }, }\n    hide = ( object, name, value ) => Object.defineProperty object, name,\n        enumerable:   false\n        writable:     true\n        configurable: true\n        value:        value\n\n    #---------------------------------------------------------------------------------------------------------\n    return { set_getter, hide, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_nameit: ->\n    nameit = ( name, fn ) -> Object.defineProperty fn, 'name', { value: name, }; fn\n    #---------------------------------------------------------------------------------------------------------\n    return { nameit, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_stack_classes: ->\n    { set_getter,\n      hide,       } = SFMODULES.require_managed_property_tools()\n    misfit          = Symbol 'misfit'\n    class XXX_Stack_error extends Error\n\n    #===========================================================================================================\n    class Stack\n\n      #---------------------------------------------------------------------------------------------------------\n      constructor: ->\n        @data = []\n        return undefined\n\n      #---------------------------------------------------------------------------------------------------------\n      toString: -> \"[#{ ( \"#{e}\" for e in @data ).join'.' }]\"\n\n      #---------------------------------------------------------------------------------------------------------\n      set_getter @::, 'length',   -> @data.length\n      set_getter @::, 'is_empty', -> @data.length is 0\n      clear: -> @data.length = 0; null\n      [Symbol.iterator]: -> yield from @data\n\n      #---------------------------------------------------------------------------------------------------------\n      push:     ( x ) -> @data.push x;    null\n      unshift:  ( x ) -> @data.unshift x; null\n\n      #---------------------------------------------------------------------------------------------------------\n      pop: ( fallback = misfit ) ->\n        if @is_empty\n          return fallback unless fallback is misfit\n          throw new XXX_Stack_error \"Ωidsp___4 unable to pop value from empty stack\"\n        return @data.pop()\n\n      #---------------------------------------------------------------------------------------------------------\n      shift: ( fallback = misfit ) ->\n        if @is_empty\n          return fallback unless fallback is misfit\n          throw new XXX_Stack_error \"Ωidsp___5 unable to shift value from empty stack\"\n        return @data.shift()\n\n      #---------------------------------------------------------------------------------------------------------\n      peek: ( fallback = misfit ) ->\n        if @is_empty\n          return fallback unless fallback is misfit\n          throw new XXX_Stack_error \"Ωidsp___6 unable to peek value of empty stack\"\n        return @data.at -1\n\n    #-----------------------------------------------------------------------------------------------------------\n    return { Stack, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_infiniproxy: ->\n    ###\n\n    ## To Do\n\n    * **`[—]`** allow to set context to be used by `apply()`\n    * **`[—]`** allow to call `sys.stack.clear()` manually where seen fit\n\n    ###\n    { hide,               } = SFMODULES.require_managed_property_tools()\n    { Stack,              } = SFMODULES.require_stack_classes()\n    ### TAINT in this simulation of single-file modules, a new distinct symbol is produced with each call to\n    `require_infiniproxy()` ###\n    sys_symbol              = Symbol 'sys'\n    # misfit                  = Symbol 'misfit'\n    template                =\n      ### An object that will be checked for existing properties to return; when no provider is given or a\n      provider lacks a requested property, `sys.sub_level_proxy` will be returned for property accesses: ###\n      provider:     Object.create null\n      ### A function to be called when the proxy (either `sys.top_level_proxy` or `sys.sub_level_proxy`) is\n      called; notice that if the `provider` provides a method for a given key, that method will be called\n      instead of the `callee`: ###\n      callee:       null\n\n    #=========================================================================================================\n    create_infinyproxy = ( cfg ) ->\n      ### TAINT use proper typechecking ###\n      cfg = { template...,  cfg..., }\n      #.......................................................................................................\n      new_proxy = ({ is_top_level, }) ->\n        callee_ctx  = null\n        get_ctx     = -> callee_ctx ?= { is_top_level, cfg..., sys..., }\n        #.....................................................................................................\n        R = new Proxy cfg.callee,\n\n          #-----------------------------------------------------------------------------------------------------\n          apply: ( target, key, P ) ->\n            # urge 'Ω__10', \"apply #{rpr { target, key, P, is_top_level, }}\"\n\n            R = Reflect.apply target, get_ctx(), P\n            sys.stack.clear()\n            return R\n\n          #-----------------------------------------------------------------------------------------------------\n          get: ( target, key ) ->\n            # urge 'Ω__11', \"get #{rpr { target, key, }}\"\n            return get_ctx()                      if key is sys_symbol\n            return target[ key ]                  if ( typeof key ) is 'symbol'\n            return Reflect.get cfg.provider, key  if Reflect.has cfg.provider, key\n            sys.stack.clear() if is_top_level\n            sys.stack.push key\n            # return \"[result for getting non-preset key #{rpr key}] from #{rpr provider}\"\n            return sys.sub_level_proxy\n        #.....................................................................................................\n        return R\n      #.......................................................................................................\n      sys = { stack: new Stack(), }\n      sys.top_level_proxy = new_proxy { is_top_level: true,  }\n      sys.sub_level_proxy = new_proxy { is_top_level: false, }\n      #.......................................................................................................\n      return sys.top_level_proxy\n\n    #---------------------------------------------------------------------------------------------------------\n    return { create_infinyproxy, sys_symbol, }\n\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_next_free_filename: ->\n    cfg =\n      max_attempts:   9999\n      prefix:         '~.'\n      suffix:         '.bricabrac-cache'\n    cache_filename_re = ///\n      ^\n      (?: #{RegExp.escape cfg.prefix} )\n      (?<first>.*)\n      \\.\n      (?<nr>[0-9]{4})\n      (?: #{RegExp.escape cfg.suffix} )\n      $\n      ///v\n    rpr               = ( x ) ->\n      return \"'#{x.replace /'/g, \"\\\\'\" if ( typeof x ) is 'string'}'\"\n      return \"#{x}\"\n    errors =\n      TMP_exhaustion_error: class TMP_exhaustion_error extends Error\n      TMP_validation_error: class TMP_validation_error extends Error\n    FS            = require 'node:fs'\n    PATH          = require 'node:path'\n    #.......................................................................................................\n    exists = ( path ) ->\n      try FS.statSync path catch error then return false\n      return true\n    #.......................................................................................................\n    get_next_filename = ( path ) ->\n      ### TAINT use proper type checking ###\n      throw new errors.TMP_validation_error \"Ω___1 expected a text, got #{rpr path}\" unless ( typeof path ) is 'string'\n      throw new errors.TMP_validation_error \"Ω___2 expected a nonempty text, got #{rpr path}\" unless path.length > 0\n      dirname  = PATH.dirname path\n      basename = PATH.basename path\n      unless ( match = basename.match cache_filename_re )?\n        return PATH.join dirname, \"#{cfg.prefix}#{basename}.0001#{cfg.suffix}\"\n      { first, nr,  } = match.groups\n      nr              = \"#{( parseInt nr, 10 ) + 1}\".padStart 4, '0'\n      path            = first\n      return PATH.join dirname, \"#{cfg.prefix}#{first}.#{nr}#{cfg.suffix}\"\n    #.......................................................................................................\n    get_next_free_filename = ( path ) ->\n      R             = path\n      failure_count = -1\n      #.....................................................................................................\n      loop\n        #...................................................................................................\n        failure_count++\n        if failure_count > cfg.max_attempts\n          throw new errors.TMP_exhaustion_error \"Ω___5 too many (#{failure_count}) attempts; path #{rpr R} exists\"\n        #...................................................................................................\n        R = get_next_filename R\n        break unless exists R\n      return R\n    #.......................................................................................................\n    return exports = { get_next_free_filename, get_next_filename, exists, cache_filename_re, errors, }\n\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_ansi: ->\n\n    #=========================================================================================================\n    ANSI = new class Ansi\n      ###\n\n      * as for the background ('bg'), only colors and no effects can be set; in addition, the bg color can be\n        set to its default (or 'transparent'), which will show the terminal's or the terminal emulator's\n        configured bg color\n      * as for the foreground ('fg'), colors and effects such as blinking, bold, italic, underline, overline,\n        strike can be set; in addition, the configured terminal default font color can be set, and each effect\n        has a dedicated off-switch\n      * neat tables can be drawn by combining the overline effect with `│` U+2502 'Box Drawing Light Vertical\n        Line'; the renmarkable feature of this is that it minimizes spacing around characters meaning it's\n        possible to have adjacent rows of cells separated from the next row by a border without having to\n        sacrifice a line of text just to draw the border.\n      * while the two color palattes implied by the standard XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n        * better to only use full RGB than to fuzz around with palettes\n        * apps that use colors at all should be prepared for dark and bright backgrounds\n        * in general better to set fg, bg colors than to use reverse\n        * but reverse actually does do what it says—it swaps fg with bg color\n\n      \\x1b[39m default fg color\n      \\x1b[49m default bg color\n\n      ###\n      #-------------------------------------------------------------------------------------------------------\n      fg_from_dec: ([ r, g, b, ]) -> \"\\x1b[38:2::#{r}:#{g}:#{b}m\"\n      bg_from_dec: ([ r, g, b, ]) -> \"\\x1b[48:2::#{r}:#{g}:#{b}m\"\n      fg_from_hex: ( rhx ) -> @fg_from_dec @dec_from_hex rhx\n      bg_from_hex: ( rhx ) -> @bg_from_dec @dec_from_hex rhx\n      fg_from_name: ( name ) ->\n        rgb = @colors[ name ] ? @colors.fallback\n        return @fg_from_dec rgb\n      dec_from_hex: ( hex ) ->\n        ### TAINT use proper typing ###\n        throw new Error \"Ω__25 expected text, got #{rpr hex}\" unless ( typeof hex ) is 'string'\n        throw new Error \"Ω__25 not a proper hexadecimal RGB code: '#{hex.replace /'/g, \"\\\\'\"}'\" unless /^#[0-9a-f]{6}$/i.test hex\n        [ r16, g16, b16, ] = [ hex[ 1 .. 2 ], hex[ 3 .. 4 ], hex[ 5 .. 6 ], ]\n        return [ ( parseInt r16, 16 ), ( parseInt g16, 16 ), ( parseInt b16, 16 ), ]\n\n    #---------------------------------------------------------------------------------------------------------\n    return exports = { ANSI, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_ansi_colors_and_effects: ->\n    { ANSI, } = SFMODULES.require_ansi()\n    #.........................................................................................................\n    rgb_dec =\n      black:              [   0,   0,   0, ]\n      darkslategray:      [  47,  79,  79, ]\n      dimgray:            [ 105, 105, 105, ]\n      slategray:          [ 112, 128, 144, ]\n      gray:               [ 128, 128, 128, ]\n      lightslategray:     [ 119, 136, 153, ]\n      darkgray:           [ 169, 169, 169, ]\n      silver:             [ 192, 192, 192, ]\n      lightgray:          [ 211, 211, 211, ]\n      gainsboro:          [ 220, 220, 220, ]\n    #.........................................................................................................\n    rgb_hex =\n      white:            '#ffffff'\n      amethyst:         '#f0a3ff'\n      blue:             '#0075dc'\n      caramel:          '#993f00'\n      damson:           '#4c005c'\n      ebony:            '#191919'\n      forest:           '#005c31'\n      green:            '#2bce48'\n      lime:             '#9dcc00'\n      quagmire:         '#426600'\n      honeydew:         '#ffcc99'\n      iron:             '#808080'\n      jade:             '#94ffb5'\n      khaki:            '#8f7c00'\n      mallow:           '#c20088'\n      navy:             '#003380'\n      orpiment:         '#ffa405'\n      pink:             '#ffa8bb'\n      red:              '#ff0010'\n      sky:              '#5ef1f2'\n      turquoise:        '#00998f'\n      violet:           '#740aff'\n      wine:             '#990000'\n      uranium:          '#e0ff66'\n      xanthin:          '#ffff80'\n      yellow:           '#ffe100'\n      zinnia:           '#ff5005'\n    #.........................................................................................................\n    R =\n      overline1:          '\\x1b[53m'\n      overline0:          '\\x1b[55m'\n      default:            '\\x1b[39m'\n      bg_default:         '\\x1b[49m'\n      bold:               '\\x1b[1m'\n      bold0:              '\\x1b[22m'\n      italic:             '\\x1b[3m'\n      italic0:            '\\x1b[23m'\n      reset:              '\\x1b[0m'\n      #.......................................................................................................\n      black:              ANSI.fg_from_dec rgb_dec.black\n      darkslategray:      ANSI.fg_from_dec rgb_dec.darkslategray\n      dimgray:            ANSI.fg_from_dec rgb_dec.dimgray\n      slategray:          ANSI.fg_from_dec rgb_dec.slategray\n      gray:               ANSI.fg_from_dec rgb_dec.gray\n      lightslategray:     ANSI.fg_from_dec rgb_dec.lightslategray\n      darkgray:           ANSI.fg_from_dec rgb_dec.darkgray\n      silver:             ANSI.fg_from_dec rgb_dec.silver\n      lightgray:          ANSI.fg_from_dec rgb_dec.lightgray\n      gainsboro:          ANSI.fg_from_dec rgb_dec.gainsboro\n      #.......................................................................................................\n      white:              ANSI.fg_from_hex rgb_hex.white\n      amethyst:           ANSI.fg_from_hex rgb_hex.amethyst\n      blue:               ANSI.fg_from_hex rgb_hex.blue\n      caramel:            ANSI.fg_from_hex rgb_hex.caramel\n      damson:             ANSI.fg_from_hex rgb_hex.damson\n      ebony:              ANSI.fg_from_hex rgb_hex.ebony\n      forest:             ANSI.fg_from_hex rgb_hex.forest\n      green:              ANSI.fg_from_hex rgb_hex.green\n      lime:               ANSI.fg_from_hex rgb_hex.lime\n      quagmire:           ANSI.fg_from_hex rgb_hex.quagmire\n      honeydew:           ANSI.fg_from_hex rgb_hex.honeydew\n      iron:               ANSI.fg_from_hex rgb_hex.iron\n      jade:               ANSI.fg_from_hex rgb_hex.jade\n      khaki:              ANSI.fg_from_hex rgb_hex.khaki\n      mallow:             ANSI.fg_from_hex rgb_hex.mallow\n      navy:               ANSI.fg_from_hex rgb_hex.navy\n      orpiment:           ANSI.fg_from_hex rgb_hex.orpiment\n      pink:               ANSI.fg_from_hex rgb_hex.pink\n      red:                ANSI.fg_from_hex rgb_hex.red\n      sky:                ANSI.fg_from_hex rgb_hex.sky\n      turquoise:          ANSI.fg_from_hex rgb_hex.turquoise\n      violet:             ANSI.fg_from_hex rgb_hex.violet\n      wine:               ANSI.fg_from_hex rgb_hex.wine\n      uranium:            ANSI.fg_from_hex rgb_hex.uranium\n      xanthin:            ANSI.fg_from_hex rgb_hex.xanthin\n      yellow:             ANSI.fg_from_hex rgb_hex.yellow\n      zinnia:             ANSI.fg_from_hex rgb_hex.zinnia\n      #.......................................................................................................\n      bg_black:           ANSI.bg_from_dec rgb_dec.black\n      bg_darkslategray:   ANSI.bg_from_dec rgb_dec.darkslategray\n      bg_dimgray:         ANSI.bg_from_dec rgb_dec.dimgray\n      bg_slategray:       ANSI.bg_from_dec rgb_dec.slategray\n      bg_gray:            ANSI.bg_from_dec rgb_dec.gray\n      bg_lightslategray:  ANSI.bg_from_dec rgb_dec.lightslategray\n      bg_darkgray:        ANSI.bg_from_dec rgb_dec.darkgray\n      bg_silver:          ANSI.bg_from_dec rgb_dec.silver\n      bg_lightgray:       ANSI.bg_from_dec rgb_dec.lightgray\n      bg_gainsboro:       ANSI.bg_from_dec rgb_dec.gainsboro\n      #.......................................................................................................\n      bg_white:           ANSI.bg_from_hex rgb_hex.white\n      bg_amethyst:        ANSI.bg_from_hex rgb_hex.amethyst\n      bg_blue:            ANSI.bg_from_hex rgb_hex.blue\n      bg_caramel:         ANSI.bg_from_hex rgb_hex.caramel\n      bg_damson:          ANSI.bg_from_hex rgb_hex.damson\n      bg_ebony:           ANSI.bg_from_hex rgb_hex.ebony\n      bg_forest:          ANSI.bg_from_hex rgb_hex.forest\n      bg_green:           ANSI.bg_from_hex rgb_hex.green\n      bg_lime:            ANSI.bg_from_hex rgb_hex.lime\n      bg_quagmire:        ANSI.bg_from_hex rgb_hex.quagmire\n      bg_honeydew:        ANSI.bg_from_hex rgb_hex.honeydew\n      bg_iron:            ANSI.bg_from_hex rgb_hex.iron\n      bg_jade:            ANSI.bg_from_hex rgb_hex.jade\n      bg_khaki:           ANSI.bg_from_hex rgb_hex.khaki\n      bg_mallow:          ANSI.bg_from_hex rgb_hex.mallow\n      bg_navy:            ANSI.bg_from_hex rgb_hex.navy\n      bg_orpiment:        ANSI.bg_from_hex rgb_hex.orpiment\n      bg_pink:            ANSI.bg_from_hex rgb_hex.pink\n      bg_red:             ANSI.bg_from_hex rgb_hex.red\n      bg_sky:             ANSI.bg_from_hex rgb_hex.sky\n      bg_turquoise:       ANSI.bg_from_hex rgb_hex.turquoise\n      bg_violet:          ANSI.bg_from_hex rgb_hex.violet\n      bg_wine:            ANSI.bg_from_hex rgb_hex.wine\n      bg_uranium:         ANSI.bg_from_hex rgb_hex.uranium\n      bg_xanthin:         ANSI.bg_from_hex rgb_hex.xanthin\n      bg_yellow:          ANSI.bg_from_hex rgb_hex.yellow\n      bg_zinnia:          ANSI.bg_from_hex rgb_hex.zinnia\n    #.........................................................................................................\n    return { ansi_colors_and_effects: R, }\n"
  ]
}